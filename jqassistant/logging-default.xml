<jqassistant-rules
        xmlns="http://schema.jqassistant.org/rule/v1.10"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://schema.jqassistant.org/rule/v1.10 https://schema.jqassistant.org/rule/jqassistant-rule-v1.10.xsd">
    <group id="logging:Default">
        <includeConcept refId="logging:Logger"/>
        <includeConcept refId="logging:Slf4j"/>
        <includeConstraint refId="logging:UseSlf4jForLogging"/>
        <includeConstraint refId="logging:IllegalUsageOfSystemOutAndErr"/>
    </group>

    <concept id="logging:Logger">
        <description>Labels all loggers with :Logger</description>
        <cypher><![CDATA[
         MATCH  (t:Type)
         WHERE  t.fqn IN ["org.slf4j.Logger", "org.apache.commons.logging.Log"]
         SET    t:Logger
         RETURN t.fqn AS Logger
        ]]></cypher>
    </concept>

    <concept id="logging:Slf4j">
        <requiresConcept refId="logging:Logger"/>
        <description>Labels the Slf4j logger</description>
        <cypher><![CDATA[
         MATCH  (t:Type:Logger)
         WHERE  t.fqn = "org.slf4j.Logger"
         SET    t:Slf4j
         RETURN t.fqn
        ]]></cypher>
    </concept>

    <constraint id="logging:UseSlf4jForLogging">
        <requiresConcept refId="preparation:ShopizerFiles"/>
        <requiresConcept refId="logging:Slf4j"/>
        <description>Only the usage of Slf4 is allowed</description>
        <cypher><![CDATA[
         MATCH  (logger:Type:Logger)-[:DECLARES]->(m:Method),
                (t:Type:Shopizer)-[:DECLARES]->(:Method)-[usage:INVOKES]->(m)
         WHERE  NOT logger:Slf4j
         RETURN t.fqn AS Type, logger.fqn AS Logger, collect(usage.lineNumber) AS LineNumbers
        ]]></cypher>
    </constraint>

    <constraint id="logging:IllegalUsageOfSystemOutAndErr">
        <requiresConcept refId="preparation:ShopizerFiles"/>
        <description>Don't use System.out and System.err in production code for logging</description>
        <cypher><![CDATA[
         MATCH  (system:Type{fqn: "java.lang.System"})-[:DECLARES]->(writer:Field),
                (a:Shopizer:Main:Artifact)-[:CONTAINS]->(t:Type)-[:DECLARES]->(m:Method),
                (m)-[reads:READS]->(writer)
         WHERE  writer.signature in [
                    "java.io.PrintStream out",
                    "java.io.PrintStream err"
                ]
         RETURN t.fqn as Type, writer.signature, collect(reads.lineNumber) as LineNumbers
        ]]></cypher>
    </constraint>

</jqassistant-rules>
